package ait.arrays.utils;

public class ArraysTools {
    //maxArray  Метод находит максимальное значение в заданном массиве.
    // Он инициализирует переменную res значением первого элемента массива,
    // а затем сравнивает каждый элемент с текущим максимальным значением и обновляет res,
    // если находит большее значение.
    public static int maxArray(int[] arr) {
        int res = arr[0];
        for (int i = 0; i < arr.length; i++) {
            if (res < arr[i]) {
                res = arr[i];
            }
        }
        return res;
    }

    //search: Метод выполняет поиск заданного значения в массиве и возвращает его индекс.
    // Он проходит по каждому элементу массива и сравнивает его с заданным значением.
    // Если значение найдено, метод возвращает соответствующий индекс, в противном случае возвращается -1.
    public static int search(int[] arr, int value) {
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == value) {
                return i;
            }
        }
        return -1;
    }

    //binarySearch: Метод выполняет двоичный поиск заданного значения в отсортированном массиве.
    // Он устанавливает начальные значения для левого (l) и правого (r) указателей,
    // а затем ищет значение в середине массива. Если значение совпадает с искомым значением,
    // метод возвращает его индекс. Если искомое значение больше значения в середине,
    // указатель l обновляется, чтобы исключить левую часть массива, иначе обновляется
    // указатель r для исключения правой части массива.
    // Процесс повторяется до тех пор, пока не будет найдено значение или пока l не станет больше r.
    // Если значение не найдено, метод возвращает -1.
    public static int binarySearch(int[] arr, int value) {
        int l = 0;
        int r = arr.length - 1;
        while (l <= r) {
            int mid = (l + r) / 2;
            if (arr[mid] == value) {
                return mid;
            }
            if (value > arr[mid]) {
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return -1;
    }

    //bubbleSort: Метод сортирует заданный массив в порядке возрастания, используя алгоритм сортировки пузырьком.
    // Он проходит по всем элементам массива и сравнивает каждую пару соседних элементов.
    // Если элементы расположены в неправильном порядке, они меняются местами.
    // Процесс повторяется до тех пор, пока массив не будет полностью отсортирован.
    public static void bubbleSort(int[] arr) {
        for (int i = 0; i < arr.length - 1; i++) {
            for (int j = 0; j < arr.length - 1 - i; j++) {
                if (arr[j] > arr[j + 1]) {
                    int t = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = t;
                }
            }
        }
    }

    //bubbleSort1: Метод также выполняет сортировку пузырьком, но с оптимизацией.
    // Он использует флаг, который проверяет, были ли сделаны обмены во время одного прохода.
    // Если обмены были сделаны, флаг устанавливается в true и процесс повторяется.
    // Если обмены не были сделаны, сортировка считается завершенной.
    public static void bubbleSort1(int[] arr) {
        boolean flag = bubbling(arr);
        while (flag) {
            flag = bubbling(arr);
        }
        //while (bubbling(arr));
    }

    //Метод bubbling используется в методе bubbleSort1 для выполнения одной итерации сортировки пузырьком.
    // Он проходит по массиву и сравнивает каждую пару соседних элементов.
    // Если элементы расположены в неправильном порядке (текущий элемент больше следующего),
    // они меняются местами, а флаг flag устанавливается в true для указания на наличие обменов элементов.
    private static boolean bubbling(int[] arr) {
        boolean flag = false;
        for (int j = 0; j < arr.length - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                int t = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = t;
                flag = true;
            }
        }
        return flag;
    }

    //fillArray: Метод заполняет заданный массив случайными целочисленными значениями в указанном диапазоне.
    // Он проходит по каждому элементу массива и устанавливает его равным случайному числу, генерируемому с
    // помощью метода Math.random(), в заданном диапазоне.
    public static void fillArray(int[] arr, int min, int max) {
        for (int i = 0; i < arr.length; i++) {
            arr[i] = (int) (min + Math.random() * (max + 1 - min));
        }
    }

    //printArray: Метод выводит элементы заданного массива на экран.
    // Он проходит по каждому элементу массива и выводит его значение с помощью метода
    public static void printArray(int[] arr) {
        for (int i = 0; i < arr.length; i++) {
            System.out.print(arr[i] + "\t");
        }
        System.out.println();
    }
}