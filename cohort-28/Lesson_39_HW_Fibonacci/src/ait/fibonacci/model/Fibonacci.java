package ait.fibonacci.model;

import java.util.Iterator;


// Класс, который представляет собой последовательность Фибоначчи
public class Fibonacci implements Iterable<Integer> {

	private int quantity;     					// Количество элементов последовательности, которые нужно сгенерировать

	public Fibonacci(int quantity) {			// Конструктор, который принимает количество элементов последовательности, которые нужно сгенерировать
		this.quantity = quantity;				// Запоминаем количество элементов последовательности, которые нужно сгенерировать
	}


	// Метод, который возвращает сумму всех чисел в последовательности
	public String getSum() {
		int sum = 0; 							// Переменная, в которой будет храниться сумма всех чисел в последовательности
		for (Integer i : this) {				// Проходимся по всем числам в последовательности (см. метод iterator())
			sum += i;							// Добавляем текущее число к сумме
		}
		return Integer.toString(sum);		// Возвращаем сумму всех чисел в последовательности

	}

	// Метод, который возвращает количество элементов последовательности, которые нужно сгенерировать
	public int getQuantity() {
		return quantity;						// Возвращаем количество элементов последовательности, которые нужно сгенерировать
	}

	// Метод, который устанавливает количество элементов последовательности, которые нужно сгенерировать
	public void setQuantity(int quantity) {
		this.quantity = quantity;				// Запоминаем количество элементов последовательности, которые нужно сгенерировать
	}

	// Метод, который возвращает итератор, который будет проходиться по всем числам в последовательности
	@Override
	public Iterator<Integer> iterator() {
		return new FibonacciIterator(quantity);	// Возвращаем итератор
	}


}
